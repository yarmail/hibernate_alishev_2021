package org.example;

import org.example.model.Item;
import org.example.model.Person;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

// к уроку 52
/*
Здесь собрано несколько вариантов,
для проверки нужно раскомитить один из них
или каждый по очереди
 */
public class App {
    public static void main(String[] args) {
        Configuration configuration = new Configuration()
                .addAnnotatedClass(Person.class)
                .addAnnotatedClass(Item.class);
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.getCurrentSession();

        try {
            session.beginTransaction();
            /* 1) попробуем получить вещи человека c id = 3
            У него товары c id 4, 5, 6
            Получаем Человека из Хибернета
            Когда у него вызываем getItems() тоже отрабатывает Хибер
            */
            /*
            Person person = session.get(Person.class, 3);
            System.out.println(person);
            List<Item> items = person.getItems();
            System.out.println(items);
            */
            /* -----------------
            2) Так ка связь двусторонняя теперь мы можем наоборот
            по товару получить владельца, например 5 товара
             */
            /*
            Item item = session.get(Item.class, 5);
            System.out.println(item);
            Person person = item.getOwner();
            System.out.println(person);
            */
            /* ------------------
            3) Попробуем добавить людей и товары с помощью Hibernate
            Для начала попробуем добавить новый товар для
            для существующего человека, например с id 2.
            Чтобы добавтьб новый товар мы должны его создать
            Когда мы сохраним новый товар newItem
            командой session.save(newItem) Хибер
            сделает сам все правильно и в качестве внешнего
            ключа укажет id Person

            ВАЖНО
            Так как связь двустороняя надо ли нам писать
            что у человека есть товар?
            person.getItems().add(newItem);
            Это нужно писать для кеша Hibernate. Для базы не надо
            Для базы Хибер довольствуется теми действиями, которые
            вы создали на дочерней стороне
             */
            /*
            Person person = session.get(Person.class, 2);
            Item newItem = new Item("Item from Hibernate", person);
            person.getItems().add(newItem);
            session.save(newItem);
            */
            /*-------------------------
            Попробуем создать нового человека с одним заказом
            person.setItems() - нужно для кеша, не для базы

            session.save(person)
            в этом уроке пока не настроено каскадирование, поэтому
            person мы сохраняем вручную. Без этой строки мы не сможем сохранить
            newItem

             */
            /*
            Person person = new Person("Test person", 30);
            Item newItem = new Item("Item from Hibernate 2", person);
            person.setItems(new ArrayList<Item>(Collections.singletonList(newItem)));
            session.save(person);
            session.save(newItem);
            */
            /* ----------------------------
            Попробуем удалить все товары у человека с id = 3
            session.remove(item) - удаляем каждый товар в БД
            person.getItems().clear() - работаем с кешем
             */
            /*
            Person person = session.get(Person.class, 3);
            List<Item> items = person.getItems();
            for (Item item: items)
                session.remove(item);
            person.getItems().clear();
            */
            /* ----------------------------------
            Удаляем человека c id = 2
            В самой базе данных мы указали каскадирование, то, что
            при удалении человека внешний ключ будет равен null
            person.getItems() -для кеша
            */
            /*
            Person person = session.get(Person.class, 2);
            session.remove(person);
            person.getItems().forEach(item -> item.setOwner(null));
            */
            /*-------------------
            Пробуем поменять владельца товара c 1 на 4
            item.getOwner().getItems().remove(item) - делаем для кеша
            item.setOwner(person) - делаем для базы
            person.getItems().add(item) - делаем для кеша
             */
            Person person = session.get(Person.class, 4);
            Item item = session.get(Item.class, 1);
            item.getOwner().getItems().remove(item);
            item.setOwner(person);
            person.getItems().add(item);
            session.getTransaction().commit();
        } finally {
            sessionFactory.close();
        }
    }
}
// Примечания
/*
.addAnnotatedClass
В конфигурацию добавляем наши аннотированные классы


Как обычно весь код кладем между
session.beginTransaction();
и
session.getTransaction().commit();
За сессией Хибернейт не работает


 */