package org.example;

import org.example.model.Item;
import org.example.model.Person;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

// к уроку 54 Каскадирование в Hibernate
/*
 */
public class App {
    public static void main(String[] args) {
        Configuration configuration = new Configuration()
                .addAnnotatedClass(Person.class)
                .addAnnotatedClass(Item.class);
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.getCurrentSession();

        try {
            session.beginTransaction();

            /*
            session.save(person)
            Если мы сохраним человека и не сохраним товар, то сам он не сохранится,
            т.к. не настроено каскадирование
            Обычно мы настраиваием каскадирование на родительской сущности

            session.persist(person);
            Если в Person мы настроили каскадирование на Persist
            @OneToMany(mappedBy = "owner", cascade = CascadeType.PERSIST)
            то здесь мы можем поменять save() на похожий метод persist()

            После настройки каскадирования у нас будут сохранятся, связанные
            с этой сущностью товары т.е. hibernate сделает за нас
            session.persist(item). Если товаров будет много - то все товары

             */
            /*
            Person person = new Person("Test cascading", 30);
            Item item = new Item("Test cascading item", person);
            person.setItems(new ArrayList<>(Collections.singletonList(item)));
            session.save(person);
            //session.save(item);
            */
            /* --------------------------
            производим рефакторинг
            Добавляем в Person метод addItem
             */
            Person person = new Person("Test cascading 2", 30);
            person.addItem(new Item("Item1"));
            person.addItem(new Item("Item2"));
            person.addItem(new Item("Item3"));
            session.save(person);

            session.getTransaction().commit();
        } finally {
            sessionFactory.close();
        }
    }
}
// Примечания
/*

 */