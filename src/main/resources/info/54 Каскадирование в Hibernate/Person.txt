package org.example.model;

import org.hibernate.annotations.Cascade;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

// К уроку 54 Каскадирование в Hibernate
@Entity
@Table(name = "Person")
public class Person {

    @Id
    @Column(name = "id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @Column(name = "name")
    private String name;

    @Column(name = "age")
    private int age;

    @OneToMany(mappedBy = "owner")
    @Cascade(org.hibernate.annotations.CascadeType.SAVE_UPDATE)
    private List<Item> items;

    public Person() {
    }

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public List<Item> getItems() {
        return items;
    }

    public void setItems(List<Item> items) {
        this.items = items;
    }

    public void addItem(Item item) {
        if (this.items == null)
            this.items = new ArrayList<>();
        this.items.add(item);
        item.setOwner(this);
    }

    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }
}
// Примечания
/*
    @OneToMany(mappedBy = "owner", cascade = CascadeType.PERSIST)
    private List<Item> items;
У аннотации OneToMany есть аргумент cascade, в котором мы указываем
те операции, которые будут каскадироваться

CascadeType.PERSIST - при сохранении человека будут автоматически
сохранятся все связанные с ним товары. Используется, если в
клиенте мы используем метод persist()

@OneToMany(mappedBy = "owner")
@Cascade(org.hibernate.annotations.CascadeType.SAVE_UPDATE)
private List<Item> items;
Если мы хотим использовать метод save из Hibernate,
мы удаляем параметр у @OneToMany и добавляем аннотацию
@Cascade

Если мы хотим каскадировать несколько операций мы помещаем их
в фигурные скобки
@Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE, ...})
Есть много операций, например
CascadeType.REMOVE - будет каскадировать удаление на связанной сущности
(нам не нужно, оно уже усть у нас в БД)
CascadeType.DETACH - удаляет из контекста все связанные сущности
CascadeType.MERGE - присоединяет в контекст всех
CascadeType.REFRESH - обновляет кеш

------------
Производим рефакторинг, добавляем метод addItem


 */

