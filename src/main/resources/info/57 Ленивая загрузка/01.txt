57 Ленивая загрузка
Lazzy loading vs. Eager loading (ранняя)

Зачем нужны разные типы загрузки
Предположим у нас 1 человек и у него очень много товаров
Предположим что нам надо получить данные этого человека,
а товары пока не нужны

Чаще всего ленивая загрузка почти всегда
является хорошей практикой

---

FetchType (тип выборки) - выбор типа загрузки
(FetchType.png)

Связанные товары загружаются сразу
@OneToMany(mappedBy = "owner", fetch = FetchType.EAGER)
private List<Item> items;

Связанные товары загружаются по запросу
(например при вызове геттера)
@OneToMany(mappedBy = "owner", fetch = FetchType.LAZY)
private List<Item> items;

---

FetchType по умолчанию (когда явно не указываем)
@OneToMany - Lazy
@ManyToOne - Eager
@ManyToMany - Lazy
@OneToOne - Eager

---

Особенности ленивой загрузки
Мы можем подгружать связанные сущности только находясь внутри транзакции
(сущность должна находится в Persistent/Managed состоянии
За пределами Hibernate сессии (Detached состояние) загрузить
связанные сущности не получится - будет ошибка.
(load.png)

В консоли можно посмотреть какая загрузка происходит, Lazy или Eager.
При Lazy загрузке, при запросе в коде объекта - видно 1 запрос.
При Eager загрузке, при запросе одного объекта в коде видно сразу.
2 запроса, запрос объекта и запрос, связанных с ним сущностей

Если зависимости были подгружены сразу (Eager), при их вызове не будет
ещё одного обращения к базе, они будут браться у уже загруженного объекта
(person.getItems)

Если связанные объекты уже подгружены в сессии, объектом и его сущностями
можно будет пользоваться и за пределами сессии

---

Hibernate.initialize(actor.getMovies());
initialize - специальная команда для подгрузки зависимостей объекта

---

Ситуация при которой нам надо повторно получить связанные объекты
вне сессии.
В этом случае надо открыть новую сессию
....
session.beginTransaction();
Person person = session.get(Person.class, 1)
System.out.println("Получили человека из таблицы");

session.getTransaction().commit();
//session.close() -----------------
System.out.println("Сессия закрылась, находимся вне сессии");

// Открываем сессию и транзакцию ещё раз
session = sessionFactory.getCurrentSession();
session.beginTransaction();
System.out.println("Новая сессия");

// привязываем старый объект к новой сессии
person = (Person) session.merge(person);
Hibernate.initialize(person.getItems()); //Второй вариант - это сделать HQL запрос
// session.createQuery("select i from Item i where ....")







